{"ast":null,"code":"var _jsxFileName = \"/Users/RossDuncan3/Dropbox/Step 9 Productions (non-graphics)/New React website/step9productions-react-express/src/navigation/SectionBar.js\";\nimport React, { Component } from 'react';\nimport styled, { ThemeProvider, keyframes, css } from 'styled-components';\nimport { selected, unselected } from '../styling/themes';\n\nclass SectionBar extends Component {\n  constructor(_props) {\n    super(_props);\n    /***********************\n     * Set menu options here\n     ***********************/\n\n    this.ANIMATION_DURATION = '0.25s';\n\n    this.shouldTextFade = nextProps => {\n      // Apply fade animation if the header selection has changed\n      if (nextProps.selectedHeader !== this.props.selectedHeader) {\n        return css`\n                animation-name: ${this.sectionTextFade};\n                animation-duration: ${this.ANIMATION_DURATION};\n                animation-fill-mode: forwards;\n            `;\n      } else {\n        return '';\n      }\n    };\n\n    this.displaySectionBar = nextProps => {\n      // Set correct section options depending on header selection\n      const keyVals = Object.keys(this.menuOptions);\n\n      if (keyVals.includes(nextProps.selectedHeader)) {\n        // Menu item array initialisation\n        this.itemsToDisplay = []; // Set styling of menu item if it should be displayed\n\n        const MenuItem = styled.div`\n                display: inline-block;\n                color: ${props => props.theme.col};\n                text-align: center;\n                padding-top: 0.4rem;\n                padding-bottom: 0.4rem;\n                width: ${100 / this.menuOptions[nextProps.selectedHeader].length}%;\n                font-weight: bold;\n                transition: ${this.ANIMATION_DURATION};\n                &:hover {\n                    color: ${props => props.theme.hoverCol};\n                    cursor: pointer;\n                }\n                ${this.shouldTextFade(nextProps)}\n            `; // Only open the bar if it's not already showing\n\n        if (this.isVisible === false) {\n          this.SectionBarDiv = styled.div`\n                    ${this.sectionBarDivAniProps}\n                    animation-fill-mode: forwards;\n                `;\n          this.isVisible = true;\n        } else {\n          // Clear text fade div of styling\n          this.TextFadeDiv = styled.div``;\n        } // Populate menu items depending on tab selected\n\n\n        let currentMenuItem;\n        this.menuOptions[nextProps.selectedHeader].forEach(tab => {\n          // Set current menu item\n          currentMenuItem = /*#__PURE__*/React.createElement(MenuItem, {\n            onClick: () => this.props.buttonClicked(tab),\n            key: tab,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 21\n            }\n          }, tab); // Add menu item to list of components to display applying theming\n\n          this.itemsToDisplay.push( /*#__PURE__*/React.createElement(ThemeProvider, {\n            theme: () => {\n              if (tab === this.props.selectedSection) {\n                return selected;\n              } else {\n                return unselected;\n              }\n            },\n            key: tab,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 21\n            }\n          }, currentMenuItem));\n        });\n      } else {\n        // Clear the menu items\n        this.itemsToDisplay = []; // Only close bar if it is showing\n\n        if (this.isVisible) {\n          this.SectionBarDiv = styled.div`\n                    ${this.sectionBarDivAniProps}\n                    animation-direction: reverse;\n                `;\n          this.isVisible = false;\n        }\n      }\n    };\n\n    this.shouldComponentUpdate = nextProps => {\n      this.displaySectionBar(nextProps);\n      return true;\n    };\n\n    this.menuOptions = {\n      'Home': ['Welcome', 'About'],\n      'Portfolio': ['Audio Production', 'Live Events']\n    }; // Animations\n\n    this.slideAnimation = keyframes`\n            0% {\n                height: 0rem;\n                visible: false;\n            }\n            100% { height: 2.5rem; }\n        `;\n    this.sectionTextFade = keyframes`\n            0% { opacity: 0; }\n            100% { opacity: 1; }\n        `;\n    this.sectionBarDivAniProps = css`\n            background-color: #28380b;\n            animation-name: ${this.slideAnimation};\n            animation-duration: ${this.ANIMATION_DURATION};\n        `; // Initialisation\n\n    this.SectionBarDiv = styled.div``;\n    this.isVisible = false;\n    this.TextFadeDiv = styled.div``; // Run section bar code when page loads\n\n    this.displaySectionBar(this.props);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(this.SectionBarDiv, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 17\n      }\n    }, this.itemsToDisplay));\n  }\n\n}\n\nexport default SectionBar;","map":{"version":3,"sources":["/Users/RossDuncan3/Dropbox/Step 9 Productions (non-graphics)/New React website/step9productions-react-express/src/navigation/SectionBar.js"],"names":["React","Component","styled","ThemeProvider","keyframes","css","selected","unselected","SectionBar","constructor","props","ANIMATION_DURATION","shouldTextFade","nextProps","selectedHeader","sectionTextFade","displaySectionBar","keyVals","Object","keys","menuOptions","includes","itemsToDisplay","MenuItem","div","theme","col","length","hoverCol","isVisible","SectionBarDiv","sectionBarDivAniProps","TextFadeDiv","currentMenuItem","forEach","tab","buttonClicked","push","selectedSection","shouldComponentUpdate","slideAnimation","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,IAAiBC,aAAjB,EAAgCC,SAAhC,EAA2CC,GAA3C,QAAsD,mBAAtD;AACA,SAASC,QAAT,EAAmBC,UAAnB,QAAqC,mBAArC;;AAEA,MAAMC,UAAN,SAAyBP,SAAzB,CAAmC;AAG/BQ,EAAAA,WAAW,CAACC,MAAD,EAAQ;AACf,UAAMA,MAAN;AAEA;;;;AAHe,SAFnBC,kBAEmB,GAFE,OAEF;;AAAA,SAsCnBC,cAtCmB,GAsCDC,SAAD,IAAe;AAC5B;AACA,UAAIA,SAAS,CAACC,cAAV,KAA6B,KAAKJ,KAAL,CAAWI,cAA5C,EAA4D;AACxD,eAAOT,GAAI;kCACW,KAAKU,eAAgB;sCACjB,KAAKJ,kBAAmB;;aAFlD;AAKH,OAND,MAOK;AAAE,eAAO,EAAP;AAAY;AACtB,KAhDkB;;AAAA,SAkDnBK,iBAlDmB,GAkDEH,SAAD,IAAe;AAC/B;AACA,YAAMI,OAAO,GAAGC,MAAM,CAACC,IAAP,CAAY,KAAKC,WAAjB,CAAhB;;AACA,UAAIH,OAAO,CAACI,QAAR,CAAiBR,SAAS,CAACC,cAA3B,CAAJ,EAAgD;AAC5C;AACA,aAAKQ,cAAL,GAAsB,EAAtB,CAF4C,CAI5C;;AACA,cAAMC,QAAQ,GAAGrB,MAAM,CAACsB,GAAI;;yBAEfd,KAAK,IAAIA,KAAK,CAACe,KAAN,CAAYC,GAAI;;;;yBAIzB,MAAM,KAAKN,WAAL,CAAiBP,SAAS,CAACC,cAA3B,EAA2Ca,MAAO;;8BAEnD,KAAKhB,kBAAmB;;6BAEzBD,KAAK,IAAIA,KAAK,CAACe,KAAN,CAAYG,QAAS;;;kBAGzC,KAAKhB,cAAL,CAAoBC,SAApB,CAA+B;aAbrC,CAL4C,CAqB5C;;AACA,YAAI,KAAKgB,SAAL,KAAmB,KAAvB,EAA8B;AAC1B,eAAKC,aAAL,GAAqB5B,MAAM,CAACsB,GAAI;sBAC1B,KAAKO,qBAAsB;;iBADjC;AAIA,eAAKF,SAAL,GAAiB,IAAjB;AACH,SAND,MAOK;AACD;AACA,eAAKG,WAAL,GAAmB9B,MAAM,CAACsB,GAAI,EAA9B;AACH,SAhC2C,CAkC5C;;;AACA,YAAIS,eAAJ;AACA,aAAKb,WAAL,CAAiBP,SAAS,CAACC,cAA3B,EAA2CoB,OAA3C,CAAmDC,GAAG,IAAI;AACtD;AACAF,UAAAA,eAAe,gBACX,oBAAC,QAAD;AACI,YAAA,OAAO,EAAE,MAAM,KAAKvB,KAAL,CAAW0B,aAAX,CAAyBD,GAAzB,CADnB;AAEI,YAAA,GAAG,EAAEA,GAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAIKA,GAJL,CADJ,CAFsD,CAWtD;;AACA,eAAKb,cAAL,CAAoBe,IAApB,eACI,oBAAC,aAAD;AACI,YAAA,KAAK,EAAE,MAAM;AACT,kBAAIF,GAAG,KAAK,KAAKzB,KAAL,CAAW4B,eAAvB,EAAwC;AACpC,uBAAOhC,QAAP;AACH,eAFD,MAGK;AACD,uBAAOC,UAAP;AACH;AACJ,aARL;AASI,YAAA,GAAG,EAAE4B,GATT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAWKF,eAXL,CADJ;AAeH,SA3BD;AA4BH,OAhED,MAiEK;AACD;AACA,aAAKX,cAAL,GAAsB,EAAtB,CAFC,CAID;;AACA,YAAI,KAAKO,SAAT,EAAoB;AAChB,eAAKC,aAAL,GAAqB5B,MAAM,CAACsB,GAAI;sBAC1B,KAAKO,qBAAsB;;iBADjC;AAIA,eAAKF,SAAL,GAAiB,KAAjB;AACH;AACJ;AACJ,KAnIkB;;AAAA,SAqInBU,qBArImB,GAqIM1B,SAAD,IAAe;AACnC,WAAKG,iBAAL,CAAuBH,SAAvB;AACA,aAAO,IAAP;AACH,KAxIkB;;AAMf,SAAKO,WAAL,GAAmB;AACf,cAAQ,CAAC,SAAD,EAAY,OAAZ,CADO;AAEf,mBAAa,CAAC,kBAAD,EAAqB,aAArB;AAFE,KAAnB,CANe,CAWf;;AACA,SAAKoB,cAAL,GAAsBpC,SAAU;;;;;;SAAhC;AAOA,SAAKW,eAAL,GAAuBX,SAAU;;;SAAjC;AAIA,SAAK2B,qBAAL,GAA6B1B,GAAI;;8BAEX,KAAKmC,cAAe;kCAChB,KAAK7B,kBAAmB;SAHlD,CAvBe,CA6Bf;;AACA,SAAKmB,aAAL,GAAqB5B,MAAM,CAACsB,GAAI,EAAhC;AACA,SAAKK,SAAL,GAAiB,KAAjB;AACA,SAAKG,WAAL,GAAmB9B,MAAM,CAACsB,GAAI,EAA9B,CAhCe,CAkCf;;AACA,SAAKR,iBAAL,CAAuB,KAAKN,KAA5B;AACH;;AAsGD+B,EAAAA,MAAM,GAAG;AACL,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,yBAAM,aAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKnB,cADV,CADJ,CADJ;AAOH;;AArJ8B;;AAwJnC,eAAed,UAAf","sourcesContent":["import React, { Component } from 'react';\nimport styled, { ThemeProvider, keyframes, css } from 'styled-components';\nimport { selected, unselected } from '../styling/themes';\n\nclass SectionBar extends Component {\n    ANIMATION_DURATION = '0.25s';\n\n    constructor(props) {\n        super(props);\n\n        /***********************\n         * Set menu options here\n         ***********************/\n        this.menuOptions = {\n            'Home': ['Welcome', 'About'],\n            'Portfolio': ['Audio Production', 'Live Events']  \n        };\n\n        // Animations\n        this.slideAnimation = keyframes`\n            0% {\n                height: 0rem;\n                visible: false;\n            }\n            100% { height: 2.5rem; }\n        `;\n        this.sectionTextFade = keyframes`\n            0% { opacity: 0; }\n            100% { opacity: 1; }\n        `;\n        this.sectionBarDivAniProps = css`\n            background-color: #28380b;\n            animation-name: ${this.slideAnimation};\n            animation-duration: ${this.ANIMATION_DURATION};\n        `;\n\n        // Initialisation\n        this.SectionBarDiv = styled.div``;\n        this.isVisible = false;\n        this.TextFadeDiv = styled.div``;\n\n        // Run section bar code when page loads\n        this.displaySectionBar(this.props);\n    }\n\n    shouldTextFade = (nextProps) => {\n        // Apply fade animation if the header selection has changed\n        if (nextProps.selectedHeader !== this.props.selectedHeader) {\n            return css`\n                animation-name: ${this.sectionTextFade};\n                animation-duration: ${this.ANIMATION_DURATION};\n                animation-fill-mode: forwards;\n            `;\n        }\n        else { return ''; }\n    };\n\n    displaySectionBar = (nextProps) => {\n        // Set correct section options depending on header selection\n        const keyVals = Object.keys(this.menuOptions);\n        if (keyVals.includes(nextProps.selectedHeader)) {\n            // Menu item array initialisation\n            this.itemsToDisplay = [];\n\n            // Set styling of menu item if it should be displayed\n            const MenuItem = styled.div`\n                display: inline-block;\n                color: ${props => props.theme.col};\n                text-align: center;\n                padding-top: 0.4rem;\n                padding-bottom: 0.4rem;\n                width: ${100 / this.menuOptions[nextProps.selectedHeader].length}%;\n                font-weight: bold;\n                transition: ${this.ANIMATION_DURATION};\n                &:hover {\n                    color: ${props => props.theme.hoverCol};\n                    cursor: pointer;\n                }\n                ${this.shouldTextFade(nextProps)}\n            `;\n\n            // Only open the bar if it's not already showing\n            if (this.isVisible === false) {\n                this.SectionBarDiv = styled.div`\n                    ${this.sectionBarDivAniProps}\n                    animation-fill-mode: forwards;\n                `;\n                this.isVisible = true;\n            }\n            else {\n                // Clear text fade div of styling\n                this.TextFadeDiv = styled.div``;\n            }\n\n            // Populate menu items depending on tab selected\n            let currentMenuItem;\n            this.menuOptions[nextProps.selectedHeader].forEach(tab => {\n                // Set current menu item\n                currentMenuItem = (\n                    <MenuItem\n                        onClick={() => this.props.buttonClicked(tab)}\n                        key={tab}\n                    >\n                        {tab}\n                    </MenuItem>\n                );\n\n                // Add menu item to list of components to display applying theming\n                this.itemsToDisplay.push(\n                    <ThemeProvider\n                        theme={() => {\n                            if (tab === this.props.selectedSection) {\n                                return selected;\n                            }\n                            else {\n                                return unselected;\n                            }\n                        }}\n                        key={tab}\n                    >\n                        {currentMenuItem}\n                    </ThemeProvider>\n                );\n            });\n        }\n        else {\n            // Clear the menu items\n            this.itemsToDisplay = [];\n\n            // Only close bar if it is showing\n            if (this.isVisible) {\n                this.SectionBarDiv = styled.div`\n                    ${this.sectionBarDivAniProps}\n                    animation-direction: reverse;\n                `;\n                this.isVisible = false;\n            }\n        }\n    };\n\n    shouldComponentUpdate = (nextProps) => {\n        this.displaySectionBar(nextProps);\n        return true;\n    };\n\n    render() {\n        return (\n            <div>\n                <this.SectionBarDiv>\n                    {this.itemsToDisplay}\n                </this.SectionBarDiv>\n            </div>\n        );\n    }\n}\n\nexport default SectionBar"]},"metadata":{},"sourceType":"module"}